(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,u=m["".concat(o,".").concat(d)]||m[d]||b[d]||i;return n?r.a.createElement(u,c(c({ref:t},l),{},{components:n})):r.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),i=(n(0),n(103)),o={id:"installation",title:"Installation",sidebar_label:"Installation",description:"How do I use @ng-apimock?",custom_edit_url:"https://github.com/ng-apimock/core/edit/master/docs/installation.md",keywords:["ng-apimock","core","api","getting started","mocks","variables","presets"]},c={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"How do I use @ng-apimock?",source:"@site/docs/installation.md",slug:"/installation",permalink:"/docs/installation",editUrl:"https://github.com/ng-apimock/core/edit/master/docs/installation.md",version:"current",sidebar_label:"Installation",sidebar:"docs",next:{title:"Mocks",permalink:"/docs/mocks"}},s=[{value:"Requirements",id:"requirements",children:[]},{value:"Installing using npm / yarn",id:"installing-using-npm--yarn",children:[]},{value:"Usage",id:"usage",children:[{value:"Processor",id:"processor",children:[]},{value:"Middleware",id:"middleware",children:[]},{value:"Minimal setup example",id:"minimal-setup-example",children:[]}]}],l={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Ng-apimock is essentially a set of npm ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ng-apimock"},"packages")," that can be installed over npm."),Object(i.b)("h2",{id:"requirements"},"Requirements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"Node.js")," version >= 10.15.1 or above (which can be checked by running ",Object(i.b)("inlineCode",{parentName:"li"},"node -v"),"). You can use ",Object(i.b)("a",{parentName:"li",href:"https://github.com/nvm-sh/nvm"},"nvm")," for managing multiple Node versions on a single machine installed"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://yarnpkg.com/en/"},"Yarn")," version >= 1.5 (which can be checked by running ",Object(i.b)("inlineCode",{parentName:"li"},"yarn version"),"). Yarn is a performant package manager for JavaScript and replaces the ",Object(i.b)("inlineCode",{parentName:"li"},"npm")," client. It is not strictly necessary but highly encouraged.\nTo add the standard WireMock JAR as a project dependency, put the following in the dependencies section of your build file:")),Object(i.b)("h2",{id:"installing-using-npm--yarn"},"Installing using npm / yarn"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install @ng-apimock/core --save-dev\n")),Object(i.b)("p",null,"or "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @ng-apimock/core --dev\n")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"Once the plugin has been installed, you can require it with this line of JavaScript:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const apimock = require('@ng-apimock/core');\n")),Object(i.b)("h3",{id:"processor"},"Processor"),Object(i.b)("p",null,"The next step is to tell ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ng-apimock/core"},"@ng-apimock/core")," where it can find the mocks and / or presets.\nYou can do that by calling the processor."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"apimock.processor.process({\n    src: 'mocks', // required\n    patterns: { // optional\n        mocks: '**/*Mock.json', // optional: default is '**/*.mock.json'\n        presets: '**/*Preset.json', // optional: default is '**/*.preset.json'\n    },\n    watches: { // optional\n        mocks: '**/*.json', // optional: no default, set if watch files regex is different from mocks pattern\n        presets: '**/*.json' // optional: no default, set if watch files regex is different from presets pattern\n    },\n    watch: true // optional: default is 'false'\n});\n")),Object(i.b)("p",null,"There are 4 parameters here:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"src"),": this is the directory that will be used to search for mocks and presets."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"patterns"),": there are 2 regex patterns that can be overridden, mocks and presets. "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"watches"),": set these if the patterns differ from the files to watch. Typically needed when using js instead of json."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"watch"),": set to true will ensure that ng-apimock will watch for file changes.")),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"As a side-effect, when a mock or preset change has been detected, the saved state will be reset."))),Object(i.b)("h3",{id:"middleware"},"Middleware"),Object(i.b)("p",null,"The final step to take is to register ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ng-apimock/core"},"@ng-apimock/core")," as middleware. It is compatible with both ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/connect"},"Connect")," and ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/express"},"Express")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const connect = require('connect');\nconst app = connect();\n\napp.use(apimock.middleware);\n")),Object(i.b)("p",null,"or "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\n\napp.use(apimock.middleware);\n")),Object(i.b)("h4",{id:"middleware-body-limit"},"Middleware body limit"),Object(i.b)("p",null,"The default bodyParser library that is used has a body limit is ",Object(i.b)("inlineCode",{parentName:"p"},"100kb"),". In order to increase the limit you can set the limit like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"app.use(bodyParser.json({limit: '10mb'}));\n")),Object(i.b)("h4",{id:"middleware-configuration"},"Middleware configuration"),Object(i.b)("p",null,"You can configure apimock with a configuration object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"apimock.configure({\n    middleware:{\n        useHeader: true, // optional: indicator to use a header instead of a cookie to provide the identifier. (defaults to false)\n        identifier: 'my-identifier' // optional: name of the header or cookie that is used as the identifier. (defaults to 'apimockid')\n    }\n});\n")),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"The cookie or header is used to make sure that parallel executed tests ",Object(i.b)("strong",{parentName:"p"},"do not interfere")," with each other. Each session is fully isolated.   "))),Object(i.b)("h3",{id:"minimal-setup-example"},"Minimal setup example"),Object(i.b)("p",null,"This is a minimal setup example of how you can manually use @ng-apimock/core"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const apimock = require('@ng-apimock/core');\nconst express = require('express');\nconst app = express();\napp.set('port', 9999);\n\napimock.processor.process({\n    src: 'mocks'\n});\n\napp.use(apimock.middleware);\n\napp.listen(app.get('port'), () => {\n    console.log('@ng-apimock/core running on port', app.get('port'));\n});\n")),Object(i.b)("p",null,"To start up the script just type:  "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"node serve.js\n")))}p.isMDXComponent=!0}}]);