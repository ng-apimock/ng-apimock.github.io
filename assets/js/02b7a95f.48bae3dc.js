(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,d=u["".concat(i,".").concat(m)]||u[m]||b[m]||a;return n?o.a.createElement(d,s(s({ref:t},p),{},{components:n})):o.a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),o=n(8),a=(n(0),n(102)),i={id:"presets",title:"presets",sidebar_label:"presets",description:"How do I write presets?",custom_edit_url:"https://github.com/ng-apimock/core/edit/master/docs/presets.md",keywords:["ng-apimock","core","api","presets","mocks","variables"]},s={unversionedId:"presets",id:"presets",isDocsHomePage:!1,title:"presets",description:"How do I write presets?",source:"@site/docs/presets.md",slug:"/presets",permalink:"/docs/presets",editUrl:"https://github.com/ng-apimock/core/edit/master/docs/presets.md",version:"current",sidebar_label:"presets",sidebar:"docs",previous:{title:"variables",permalink:"/docs/variables"},next:{title:"Docker",permalink:"/docs/docker"}},c=[{value:"Writing a preset file",id:"writing-a-preset-file",children:[]},{value:"Actions",id:"actions",children:[]},{value:"JSON schema",id:"json-schema",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A preset in ",Object(a.b)("a",{parentName:"p",href:"https://github.com/ng-apimock/core"},"@ng-apimock/core")," is represented in a json/js file.\nIt allows you to set the state of one or multiple mocks and set variables all at once."),Object(a.b)("p",null,"This can for instance be used to set all the mocks correctly for your happy or unhappy flow."),Object(a.b)("h2",{id:"writing-a-preset-file"},"Writing a preset file"),Object(a.b)("p",null,"Presets in ",Object(a.b)("a",{parentName:"p",href:"https://github.com/ng-apimock/core"},"@ng-apimock/core")," are written in json or javascript.\nThere is only one rule to follow when writing a preset file."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"It has a unique name")),Object(a.b)("p",null,"So writing a simple preset could look like this:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "happy flow",\n    "mocks": {\n        "some mock": {\n          "scenario": "ok",\n          "delay": 3000\n        }\n      },\n      "variables": {\n        "something": "awesome"\n      }\n}\n')),Object(a.b)("p",null,"Writing a preset should always follow the ",Object(a.b)("a",{parentName:"p",href:"#json-schema"},"json schema"),"."),Object(a.b)("h2",{id:"actions"},"Actions"),Object(a.b)("p",null,"Selecting a preset can be done by using the ",Object(a.b)("a",{parentName:"p",href:"plugins"},"available clients"),"."),Object(a.b)("h2",{id:"json-schema"},"JSON schema"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "description": "Preset",\n    "properties": {\n        "mocks": {\n            "additionalProperties": {\n                "$ref": "#/definitions/MockState"\n            },\n            "type": "object"\n        },\n        "name": {\n            "type": "string"\n        },\n        "variables": {\n            "additionalProperties": {\n                "type": "string"\n            },\n            "type": "object"\n        }\n    },\n    "required": ["name", "mocks", "variables"],\n    "type": "object",\n    "definitions": {\n        "MockState": {\n            "description": "Mock state",\n            "properties": {\n                "delay": {\n                    "type": "number"\n                },\n                "echo": {\n                    "type": "boolean"\n                },\n                "scenario": {\n                    "type": "string"\n                }\n            },\n            "type": "object"\n        }\n    }\n}\n')))}l.isMDXComponent=!0}}]);